/// <reference types="@sveltejs/kit" />
/// <reference no-default-lib="true"/>
/// <reference lib="esnext" />
/// <reference lib="webworker" />

const sw = self as unknown as ServiceWorkerGlobalScope;

import { version, files, build } from '$service-worker';

const ASSETS = `cache${version}`;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const cached = new Set(to_cache);

let notifications = 0;
let ids: number[] = [];

sw.addEventListener('notificationclick', (ev: NotificationEvent) => {
	ev.notification.close();
	ev.waitUntil(
		sw.clients.matchAll({ type: 'window' }).then((clients: readonly WindowClient[]) => {
			for (const client of clients) {
				if (client.url == '/' && 'focus' in client) {
					return client.focus();
				}
			}
			notifications = 0;
			ids = [];
		})
	);
});

sw.addEventListener('push', (ev: PushEvent) => {
	ev.waitUntil(
		sw.clients.matchAll({ type: 'window' }).then(async (clients) => {
			if (!ev.data) return;
			const id = ev.data.json().id;
			if (!ids.includes(id)) ids.push(id);
			for (const client of clients) {
				if (client.focused) {
					return;
				}
			}
			const image = `${sw.origin}/x369-144.png`;
			const options = {
				badge: image,
				icon: image
			};
			notifications++;
			const title = `${notifications} ${notifications > 1 ? 'New messages' : 'New message'}`;
			sw.registration.showNotification(title, options);
		})
	);
});

sw.addEventListener('install', (event: ExtendableEvent) => {
	event.waitUntil(
		caches
			.open(ASSETS)
			.then((cache) => cache.addAll(to_cache))
			.then(() => {
				sw.skipWaiting();
			})
	);
});

sw.addEventListener('activate', (event: ExtendableEvent) => {
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// delete old caches
			for (const key of keys) {
				if (key !== ASSETS) await caches.delete(key);
			}

			sw.clients.claim();
		})
	);
});

sw.addEventListener('fetch', (event: FetchEvent) => {
	if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

	const url = new URL(event.request.url);

	// don't try to handle e.g. data: URIs
	if (!url.protocol.startsWith('http')) return;

	// ignore dev server requests
	if (url.hostname === sw.location.hostname && url.port !== sw.location.port) return;

	// always serve static files and bundler-generated assets from cache
	if (url.host === sw.location.host && cached.has(url.pathname)) {
		event.respondWith(caches.match(event.request).then(r => {
			if (!r) return Promise.reject()
			return r
		}));
		return;
	}

	if (event.request.cache === 'only-if-cached') return;

	// for everything else, try the network first, falling back to
	// cache if the user is offline. (If the pages never change, you
	// might prefer a cache-first approach to a network-first one.)
	event.respondWith(
		caches.open(`offline${version}`).then(async (cache) => {
			const response = await fetch(event.request).catch(() => null);
			if (!response) {
				const response = await cache.match(event.request).catch(() => null);
				if (response) {
					return response;
				} else {
					return Promise.reject();
				}
			}
			cache.put(event.request, response.clone());
			return response;
		})
	);
});
